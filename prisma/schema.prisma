// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id              String   @id @default(cuid())
  name            String
  address         String?
  flatCoordinates String   @map("flat_coordinates")
  extent          String?
  description     String   @db.Text
  createdAt       DateTime @map("created_at")
  reviews         Review[]
  User            User?    @relation(fields: [userId], references: [id])
  userId          String?

  @@map("courses")
}

model Review {
  id        String   @id @default(cuid())
  courseId  String   @map("course_id")
  author    String
  title     String
  content   String
  createdAt DateTime @map("created_atw")
  Course    Course   @relation(fields: [courseId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")

  @@map("reviews")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  courses       Course[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
